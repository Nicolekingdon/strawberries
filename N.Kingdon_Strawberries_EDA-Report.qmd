---
title: "Strawberries Production in the US"
author: "Nicole Kingdon"
subtitle: "An Exploratory Data Analysis"
date: 10-18-2023
date-format: long
format: pdf
toc: true
editor: visual
bibliography: references.bib
---

{{< pagebreak >}}

# Introduction

## Strawberries & Positive Health

Strawberries are a fruit that holds several minerals, vitamins, and nutrients [@craig1997], which have positive implications on human health [@afrin2016]. Specifically, strawberries have been found to help reduce likelihood of cancer, diabetes, obesity, neurodegeneration, cardiovascular disease, and metabolic syndrome (see Figure 1) [@afrin2016]. Although strawberries as a healthy food is the norm, pesticides appear to be harming the beneficial factors of this fruit.

[![Health benefits of strawberries (Afrin et al., 2016)](Screenshot%202023-10-15%20at%202.09.03%20PM.png){fig-align="center"}](https://pubs.acs.org/doi/full/10.1021/acs.jafc.6b00857?casa_token=Yey0lgUCklwAAAAA%3ACiBJjsv3mVDKwh4SMJ2rsVq25ATRzyFtirLg_tTg1Rx-uo901_rYS4Ict3dcdlmBDLT4EGjoHKdDta8#)

## Strawberries & Pesticides

Pesticides are used on fruit and vegetable crops, including strawberries, with hopes to increase the quantity [@fenik2011]. Pesticides are made of chemical compounds to reduce or completely eliminate pests from impacting crops [@afrin2016]. These chemical compounds may increase the yield of the crop, but may have a large risk on human health. Additionally, they may contaminate bodies of water and soil with the chemicals, help pests develop resistance to the chemicals, and impact helpful organisms from persisting in areas where pesticides are used. Overall, there are positive and negative impacts of using pesticides (see Figure 2), but it is important to further examine these impacts, specifically on strawberries, to understand the implications of using such.

[![Positive and negative implications of pesticides on fruit and vegetable crops (Fenik et al., 2011)](Screenshot%202023-10-15%20at%201.33.38%20PM.png){fig-align="center" width="406"}](https://www.sciencedirect.com/science/article/pii/S0165993611000938?casa_token=K6MASOVxhRsAAAAA:9McnNxBwxT2h9oXJg1FPvXtoYg_M14Q91ItmrqxsiQ5wZBVpZ2oSWHHitaCOJm9A_Fig87pkZg)

## Organic Strawberries

Strawberries that are organic are simply strawberries. They use alternative and safer methods to production, and those fruits and vegetables, in this case strawberries, are considered organic [@verteramochiu2023]. Along with these alternative methods comes a higher cost of production and care, which increases the price to the consumer.

[![](mvbstv2n8rqy.jpg){fig-align="center" width="236"}](https://www.gardeningaustin.com/blog/organic-vs-conventional)

## Analyzing Strawberry Production

The literature varies on if organic or non-organic is environmentally better [@afrin2016]. This exploratory data analysis on production of strawberries, which encompasses both processed (non-organic) and fresh (organic) market data, will help us better understand production of strawberries in the United States. Additionally, it dives deeper into the pesticide usage in states, which will provide more information as to the level of toxic ingredients that go into the production of non-organic (or conventional) strawberries .

{{< pagebreak >}}

# Data Acquisition & Assessment

## USDA-NASS Data

The data was acquired from [U.S. Department of Agriculture (USDA) and the National Agricultural Statistics Service (NASS)](https://quickstats.nass.usda.gov/). The data was uploaded for data cleaning and organizing and exploratory data analysis by Professor Haviland Wright, who chose the following data: [USDA-NASS](https://quickstats.nass.usda.gov/results/45FBC825-B104-38E2-9802-839F5F3C7036).

The data frame loaded into the environment is titled `strawberry`.

```{r warning=FALSE, message=FALSE}
#| label: read data - glimpse 
#| echo: false

library(readr)  
library(dplyr)
```

```{r warning=FALSE, message=FALSE}
#| echo: false

strawberry <- read_csv("strawberry.csv", col_names = TRUE)
```

```{r}
#| echo: false

glimpse(strawberry)
```

## Census Data

The data offers census data based on state that represents fresh market (organic) and process market (non-organic) sales.

```{r warning=FALSE, message=FALSE}
#| echo: false
census <- strawberry |>
  filter(Program == "CENSUS")

glimpse(census)
```

## Survey Data

Additionally, it holds survey information for each state, specifically indicating pesticides and bacterium used to preserve strawberry crop yield. In addition, it offers fresh and process market data.

```{r warning=FALSE, message=FALSE}
#| echo: false
survey <- strawberry |>
  filter(Program == "SURVEY")

glimpse(survey)
```

## States

There were 47 states (`r paste(strawberry|> distinct(State))`) with two states considered as "other states".

## Years

The data was from the years `r paste(strawberry|> distinct(Year))`.

## Assumptions & Motivations

### Census Data

The `census` data was a nation-wide collection of data about the fresh and process markets related to strawberries. This data has values that are indicated as `(D)`, which are data that was withheld upon request by the strawberry market in that particular state. This could leave out important information in the data.

### Survey Data

The `survey` data was collected via a survey sent out to each state in the United States. There were only 11 out of 47 states who returned the survey (`r paste(survey|> distinct(State))`), which includes the "other states". (The "other states" did not have any data relating to pesticides and bacterium.) This is only a `r paste(round((11/47)*100))`% response rate, which is not comprehensive of all the states and the entire United States process market. The states that did return the survey will still be able to show a report of pesticide and bacterium usage on their processed strawberry crops.

{{< pagebreak >}}

# Data Cleaning & Organizing

## R Packages

The following R packages were used to clean and organize the data:

```{r warning=FALSE, message=FALSE}
library(knitr)  
library(kableExtra)
library(tidyverse)
library(stringr)
library(dplyr)
```

The data was organized into two main categories: `census` and `survey`. The `census` data was cleaned and organized to show fresh and process market sales, and the `survey` data consisted of pesticide and fertilizer usage.

## Initial Data Cleaning & Organization

*The following initial data cleaning derived from Professor Wright.*

Removed columns with a single value in all columns using a function. This function produced all columns with one value from the `strawberry` data frame. From there, all but the single value columns were added back to the data frame.

```{r}
#| label: drop one-item columns
#| echo: false

drop_one_value_col <- function(df){
col_name <- NULL
col_val <- NULL
suppressWarnings({
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
  col_name = c(col_name, colnames(df[i]))
  col_val = c(col_val, df[1,i])  
} }
})

if(is.null(col_name)){return("No Columns to drop")}else{
   col_val = unlist(col_val)
   attributes(col_val) = NULL
   drp = data.frame(col_name, col_val)
   return(drp)
   }
}

str <- drop_one_value_col(strawberry)

str <- str$col_name

strawberry <- strawberry |> select(!all_of(str))
```

Next, Professor Wright checked if every row in the `state` column held a value, which it did.

```{r}
#| label: examine rows
#| echo: false

state_all <- strawberry |> group_by(State) |> count()

# if(sum(state_all$n) == dim(strawberry)[1]){print("Every row has value in the State column.")}

```

After that, Professor Wright checked to see what state had the most rows.

```{r}
#| label: which state has the most rows
#| echo: false

state_max <- state_all$State[which(state_all$n ==  max(state_all$n)  )]

```

The state with the most rows is `r paste(state_max)`.

## Separating Data Frames

*The following separation of data frames derived from Professor Wright.*

By using `dplyr`, the `strawberry` data frame was split by `Program`. The rows that contained `CENSUS` were moved to `strwb_census` , and the rows containing `SURVEY` were moved to `strwb_survey`.

```{r}
#| label: split srawberry into census and survey pieces
#| echo: false
#| warning: false
#| message: false

strwb_census <- strawberry |> filter(Program == "CENSUS")

strwb_survey <- strawberry |> filter(Program == "SURVEY")

```

### Census

After splitting `CENSUS` and `SURVEY` rows into two data frames, Professor Wright has first organized the `CENSUS` data.

First, he separated composite columns and cleaned the Value column.

The composite columns in the `strwb_census` are as follows: `Data Item` and `Domain category`.

The column separators in `CENSUS` are ",", "-", ":".

Separated `Data Item` into the new columns `Fruit`, `temp1`, `temp2`, and `temp3` by ",".

```{r}
#| label: split Data Item
#| echo: false

  strwb_census <- strwb_census |>
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("Fruit",
                                 "temp1",
                                 "temp2",
                                 "temp3"),
                         too_many = "error",
                         too_few = "align_start"
  )
```

Separated `temp1` into the new columns `crop_type` and `prop_acct` by "-".

```{r}
#| echo: false

strwb_census <- strwb_census |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("crop_type",
                                 "prop_acct"),
                         too_many = "error",
                         too_few = "align_start"
                       )
```

To finish this first section of cleaning and organizing the `strwb_census` data frame, Professor Wright string trimmed both sides of the following three columns: `crop_type`, `temp2`, and `temp3`.

```{r}
#| echo: false

strwb_census$crop_type <- str_trim(strwb_census$crop_type, side = "both")

strwb_census$temp2 <- str_trim(strwb_census$temp2, side = "both")

strwb_census$temp3 <- str_trim(strwb_census$temp3, side = "both")
```

Now, Professor Haviland created a "Fresh Market" column. To do this, he duplicated the `temp2` column with the new column name as `Fresh Market`. Next, he removed all the cells in the new column that began with `MEASURED`. Same for the cells that begin with `PROCESSING`. He substituted `NA` values for empty strings. Finally, the `FRESH MARKET` parts of the strings were removed, as they were unneccesary anymore with the new column creation of `Fresh Market`.

```{r}
#| label: create a fresh market column
#| eval: true
#| echo: false

strwb_census <- strwb_census |> mutate(`Fresh Market` = temp2, .after = temp2)

strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^MEA.*", "")

strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace( "^P.*", "")

strwb_census$`Fresh Market`[is.na(strwb_census$`Fresh Market`)] <- ""  

strwb_census$`Fresh Market` <- strwb_census$`Fresh Market` |> str_replace("^FRESH MARKET - ", "")


```

Now, to manipulate the `temp2` column, Professor Wright removed all the cells that began with `FRESH`, which would now set up the cleaning and organizing to create the `Process Market` column.

```{r}
#| echo: false

 strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^F.*", "")
```

Professor Wright created a "Process Market" column.

To do this, he followed the same method as `Fresh Market`, where he first duplicated `temp2`, then removed cells beginning with `MEASURED`, and removed `PROCESSING` from the beginning of the strings. and remove

```{r}
#| label: make process market column
#| echo: false

strwb_census <- strwb_census |> mutate(`Process Market` = temp2, .after = temp2)

strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("^MEA.*", "")

strwb_census$`Process Market`[is.na(strwb_census$`Process Market`)] <- ""

strwb_census$`Process Market` <-  strwb_census$`Process Market` |> str_replace("PROCESSING - ", "") 
```

Finally, removed the cells starting with `PROCESS MARKET` from `temp2`.

```{r}
#| echo: false

strwb_census$temp2 <- strwb_census$temp2 |> str_replace("^P.*", "")
```

Next, Professor Wright removed NA's from `prop_acct`, `temp2`, and `temp3` by substituting a space.

```{r}
#| label: remove NAs
#| echo: false

strwb_census$prop_acct[is.na(strwb_census$prop_acct)] <- "" 

strwb_census$temp2[is.na(strwb_census$temp2)] <- "" 

strwb_census$temp3[is.na(strwb_census$temp3)] <- "" 


```

From here, he combined `temp2` with `temp3` to create a `Metric` column. He also removed parts of string that did not matter, beginning with `MEASURED IN`. To finish, he moved the `Metric` column to the end.

```{r}
#| label: final cleanup
#| echo: false

strwb_census <- strwb_census |> unite(temp2, temp3, col="Metric", sep="")

strwb_census$Metric <- strwb_census$Metric |> str_replace("MEASURED IN ", "")

strwb_census <- strwb_census |> relocate(Metric, .before = Domain)

strwb_census <- strwb_census |> relocate(`Process Market`, .before = Metric)

strwb_census <- strwb_census |> rename(Totals = prop_acct)
```

The Value column was transformed. To do this, Professor Wright first pulled the `Value` column from `strwb_census` and put them into `vals`. From there, he string replaced all `vals` to remove the commas in the strings. From there, he converted the strings to numeric values. During this, `NA` values were automatically implemented.

```{r}
#| label: define functions dcomma and footnote finder
#| warning: false
#| message: false
#| eval: true
#| echo: false

vals <- strwb_census$Value

c <- vals |> str_replace_all(",", "")

c <- as.numeric(c)

```

After this, he aimed to find the location and value of the footnotes in the `Value` column. He implemented a string detection on this column, which helped discover that all the cells with `NA` values were also where the footnotes were located. The footnotes indicated that the `Value` was instructed to be left out during the data collection.

```{r}
#| warning: false
#| message: false
#| eval: true
#| echo: false

v <- strwb_census$Value

fn_i <- v |> str_detect("^\\([:upper:]\\)$") ## returns

```

I finished cleaning and organizing the `strwb_census` data frame, which is detailed below.

First, I selected particular columns that had necessary data.

```{r}
#| echo: false
strwb_census <- strwb_census |>
  select(1:2, 4, 6:11, 14:15)
```

Next, I removed the "," from the `Value` column and transformed them into numeric values. This introduced rows with `NA` values.

```{r}
#| warning: false
#| message: false
#| echo: false

strwb_census$Value <- as.numeric(str_replace_all(strwb_census$Value,pattern = ",", replacement = "")) 

```

After that, I cleaned up the `CV (%)` column by changing the values to numbers, instead of strings. This also introduced rows with `NA` values.

```{r}
#| warning: false
#| message: false
#| echo: false

strwb_census$`CV (%)` <- as.numeric(strwb_census$`CV (%)`)
```

Furthermore, I am going to omit all rows in the `Value` and `CV (%)` columns with `NA` values. These are being omitted because they hold no meaning. Only the `Value` column had to be adjusted, as the `CV (%)` column did not have any values if the `Value` column also did not.

```{r}
#| echo: false
strwb_census <- na.omit(strwb_census[strwb_census$Value, ])
```

Finally, to complete the `strwb_census` cleaning and organizing, I am going to arrange the `State` column to be in ascending order.

```{r}
#| echo: false
strwb_census <- strwb_census |>
  arrange(State)
```

### Survey

Professor Wright had organized the SURVEY data frame splitting the marketing, and production data from the chemical application data. In the strawberry data frame, The `CENSUS` rows contain marketing, sales, and production data. The `SURVEY` rows contain rows which may be redundant with the CENSUS rows and chemical application rows. These rows contain fresh and process market sales data, which have been removed.

Began cleaning and organizing `strwb_survey` by discovering what columns in this data frame that need to be split.

```{r}
#| label: strwb_survey preliminary exploration
#| echo: false
#| eval: true

# glimpse(strwb_survey)

## find strwb_survey columns that should be split into columns
## 

# distinct(strwb_survey[,3]) |> kable()
# c4 <- distinct(strwb_survey[,4])
# 
# c6 <- distinct(strwb_survey[,6])
# c7 <- distinct(strwb_survey[,7])
# c8 <- distinct(strwb_survey[,8])

# c3 |> kable()
# c4 |> kable()
# 
# c6 |> kable()
# c7 |> kable()
# c8 |> kable()


```

First, Professor Wright separated the `Data Item` column to `temp1`, `temp2`, `temp3`, and `temp4` by ",". Additionally, he separated `temp1` into `temp1a` and `temp1b`.

```{r}
#| label: data item analysis
#| echo: false


## columns need descriptive names

strwb_survey <- strwb_survey |> 
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("temp1",
                                 "temp2",
                                 "temp3",
                                 "temp4"),
                         too_many = "error",
                         too_few = "align_start"
                       )

strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = temp1,
                         delim = " - ",
                         names = c("temp1a",
                                 "temp1b"),
                         too_many = "error",
                         too_few = "align_start"
                       )
```

Next, he separated the `Domain` column into `temp22` and `temp23` by ",".

```{r}
#| label: domain
#| echo: false
#| eval: true



strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = Domain,
                         delim = ",",
                         names = c("temp22",
                                 "temp23"),
                         too_many = "error",
                         too_few = "align_start"
                       )
```

Also, he separated `Domain Category` into `temp42` and `temp43` by ",".

```{r}
#| label: Domain Category
#| echo: false
#| eval: true


strwb_survey <- strwb_survey |>
  separate_wider_delim(  cols = `Domain Category`,
                         delim = ",",
                         names = c("temp42",
                                 "temp43",
                                 "temp44",
                                 "temp45"),
                         too_many = "error",
                         too_few = "align_start"
                       )

```

To finish the `strwb_survey` cleaning and organizing, this data frame was split into two new data frames, where `strwb_survey_chem` holds pesticide data and `strwb_survey_mkt` contains all the surveyed market and fertilizer usage data.

```{r}
#| echo: false

strwb_survey_chem <- strwb_survey |> filter((temp22 == "CHEMICAL") | (temp42 == "CHEMICAL"))

strwb_survey_mkt <- strwb_survey |> filter(!((temp22 == "CHEMICAL") | (temp42 == "CHEMICAL")))
```

#### Survey: Market

Now, I further cleaned up both `strwb_survey_mkt` and `strwb_survey_chem`. First, I worked with the `strwb_survey_mkt`.

Quickly, to begin, Professor Wright Dropped one-value columns in `strwb_survey_mkt`.

```{r}
#| label: mkt 
#| echo: false
#| eval: true

mkt1 <- drop_one_value_col(strwb_survey_mkt)

# mkt1 |> kable(caption = "droping 1-value cols - mkt")

mkt1 <- setdiff(colnames(strwb_survey_mkt), mkt1$col_name)

strwb_survey_mkt <- strwb_survey_mkt |> select(all_of(mkt1))

```

To begin, I made the `Value` column into numeric values, which introduced `NA` values. Then, I changed the format of the numeric values, so they did not appear in scientific notation.

```{r}
#| echo: false
#| warning: false
#| message: false

strwb_survey_mkt$Value <- as.numeric(str_replace_all(strwb_survey_mkt$Value,pattern = ",", replacement = "")) 

strwb_survey_mkt$Value <- format(strwb_survey_mkt$Value, scientific = F)

```

To reduce the duplicity of `strwb_survey_mkt` with `strwb_census`, I separated the fresh and process market data in `strwb_survey_mkt` from the data on the fertilizer usage.

```{r}
#| echo: false
#| warning: false
#| message: false

strwb_survey_mkt <- strwb_survey_mkt |>
  filter(temp2 == " BEARING - APPLICATIONS")

```

Next, I separated the `temp42` column to create the columns `type` and `fertilizer_type` by the delimiter ":".

```{r}
#| echo: false
#| warning: false
#| message: false

strwb_survey_mkt <- strwb_survey_mkt |>
  separate_wider_delim(  cols = temp42,
                         delim = ":",
                         names = c("type",
                                 "fertilizer_type"),
                         too_many = "error",
                         too_few = "align_start"
                       )
```

I cleaned up the `fertilizer_type` strings by removing the parentheses on both sides.

```{r}
#| echo: false

strwb_survey_mkt$fertilizer_type <- str_replace(strwb_survey_mkt$fertilizer_type, "\\(", "")
strwb_survey_mkt$fertilizer_type <- str_replace(strwb_survey_mkt$fertilizer_type, "\\)", "")
```

I also removed the empty spaces in these strings.

```{r}
#| echo: false

strwb_survey_mkt$fertilizer_type <- str_trim(strwb_survey_mkt$fertilizer_type, side = "both")

```

Finally, I selected the rows that are relevant and renamed `temp3` to `measurement` and `temp4` to `avg`. I also removed the empty spaces in these strings and made the `Value` column into numeric values, which introduced `NA` values, and those rows with `NA` values were omitted.

```{r}
#| echo: false
#| warning: false
#| message: false

strwb_survey_mkt <- strwb_survey_mkt |>
  rename("measurement" = "temp3") |>
  rename("avg" = "temp4") |>
  select(1, 3, 7, 8, 10:12) 

strwb_survey_mkt$measurement <- str_trim(strwb_survey_mkt$measurement, side = "left")

strwb_survey_mkt$Value <- as.numeric(strwb_survey_mkt$Value)

strwb_survey_mkt <- strwb_survey_mkt |>
  filter(!is.na(Value))
```

#### Survey: Chemical

Finally, I finished cleaning and organizing `strwb_survey_chem`.

First, Professor Haviland dropped one-value columns in `strwb_survey_chem`.

```{r}
#| label: 1-value cols
#| echo: false
#| eval: true

chem1 <-  drop_one_value_col(strwb_survey_chem)

# chem1 |> kable(caption = "1-value columns dropped")

chem1 <- setdiff(colnames(strwb_survey_chem), chem1$col_name)

strwb_survey_chem <- strwb_survey_chem |> select(all_of(chem1))

```

Then, I selected the relevant columns.

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  select(1, 2, 7)
```

From here, I split up `temp43` into `chemical` and `PC#` by "=".

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  separate_wider_delim(  cols = temp43,
                         delim = "=",
                         names = c("chemical",
                                   "PC#"
                         ),
                         too_many = "error",
                         too_few = "align_start"
  )
```

Furthermore, I cleaned up both of the new `chemical` and the `PC#` columns by removing the unnecessary parentheses.

```{r}
#| echo: false
strwb_survey_chem$chemical <- str_replace(strwb_survey_chem$chemical, "\\(", "")
strwb_survey_chem$"PC#" <- str_replace(strwb_survey_chem$"PC#", "\\)", "")
```

I also want to separate the `chemical` column by chemical type and chemical name.

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  separate_wider_delim(  cols = chemical,
                         delim = ":",
                         names = c("chem_type",
                                   "chemical"
                         ),
                         too_many = "error",
                         too_few = "align_start"
  )
```

Trimmed off the spaces on both sides of the `chemical` column.

```{r}
#| echo: false
strwb_survey_chem$chemical <- str_trim(strwb_survey_chem$chemical, side = "both")
```

Trimmed the same to `chem_type`.

```{r}
#| echo: false
strwb_survey_chem$chem_type <- str_trim(strwb_survey_chem$chem_type, side = "both")
```

Finally, trimmed the same with `PC#`.

```{r}
#| echo: false
strwb_survey_chem$`PC#` <- str_trim(strwb_survey_chem$`PC#`, side = "both")
```

Now to remove the rows with `NA` values in the `PC#` column.

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  na.omit()
```

##### ***Addition to Strwb_Survey_Chem: WHO Chemical Toxicity***

Now, to better understand the `strwb_survey_chem` data, I added two columns of data. We are first going to begin with "chemical toxicity" (`toxicity`).

To gather this information, I used the World Health Organization (WHO)'s classification of pesticides by hazard \[[WHO, 2019](https://www.who.int/publications/i/item/9789240005662)\]. Table 1 shows the WHO's toxicity classification for pesticides.

[![Table 1. World Health Organization Pesticide Toxicity Classification](straw_health.png){fig-align="center" width="459"}](https://www.researchgate.net/publication/278283443_Relative_toxicity_of_pesticides_in_the_developing_world)

Additionally, some chemicals are presented as fatal or toxic if inhaled, as they are gaseous or volatile fumigants \[[WHO, 2019](https://www.who.int/publications/i/item/9789240005662)\]. Others are classified as "unlikely to present acute hazard" by WHO \[[WHO, 2019](https://www.who.int/publications/i/item/9789240005662)\], which means that they will not present any hazard if used properly. Furthermore, they are also classified as "no significant acute toxicity" when they are not in the WHO classification and are found to be non-toxic, mostly discovered through the Environmental Protection Agency (EPA) \[[EPA](https://www.epa.gov/)\].

I classified each chemical toxicity by the string `Highly hazardous`, `Moderately hazardous`, `Unlikely to present acute hazard`, `Slightly hazardous`, `Fatal if inhaled`, `Toxic if inhaled`, `No significant acute toxicity` and `Not specified`, based on the WHO chemical toxicity rating system \[[WHO, 2019](https://www.who.int/publications/i/item/9789240005662)\].

I searched through each classification table to find each pesticide. Not all pesticides were on the table. To find the missing chemical toxicities, I used the large language model, Chat GPT \[[Chat GPT](https://chat.openai.com/)\], found information through EPA Pesticide Fact Sheets \[[EPA-Acibenzolar](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-061402_11-Aug-00.pdf)\], \[[EPA-Ammonium.](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-031802_01-Nov-06.pdf)\], \[[EPA-Aureobasidium.](https://www.federalregister.gov/documents/2015/11/25/2015-29888/aureobasidium-pullulans-strains-dsm-14940-and-dsm-14941-exemption-from-the-requirement-of-a#:~:text=Based%20upon%20its%20evaluation%2C%20EPA,DSM%2014940%20and%20DSM%2014941.)\], \[[EPA-Canola](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/related_PC-011332_1-Oct-98.pdf)\], \[[EPA-Caprylic](https://www3.epa.gov/pesticides/chem_search/cleared_reviews/csr_PC-079029_31-Jul-02_a.pdf)\], \[[EPA-Capasaicin](https://archive.epa.gov/pesticides/reregistration/web/pdf/4018fact.pdf)\], \[[EPA-Clethodim](https://www3.epa.gov/pesticides/chem_search/cleared_reviews/csr_PC-121011_10-Jul-01_100.pdf)\], \[[EPA-Cyfluefenamid](https://www.federalregister.gov/documents/2018/02/09/2018-02670/cyflufenamid-pesticide-tolerances#:~:text=Cyflufenamid%20has%20low%20acute%20toxicity,target%20organ%20for%20cyflufenamid%20toxicity.)\], \[[EPA-Cytokinin](https://www3.epa.gov/pesticides/chem_search/reg_actions/reregistration/fs_G-29_29-Feb-96.pdf)\], \[[EPA-Indole.](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-046701_1-Aug-00.pdf)\], \[[EPA-Iron-Phos.](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-034903_01-Mar-01.pdf)\], \[[EPA-Mefenoxam](https://www.federalregister.gov/documents/2016/05/04/2016-10389/mefenoxam-pesticide-tolerances#:~:text=There%20was%20no%20indication%20of,studies%20of%20mefenoxam%20or%20metalaxyl.)\], \[[EPA-Metam-sodium](https://www3.epa.gov/pesticides/chem_search/cleared_reviews/csr_PC-039003_30-Sep-04_a.pdf)\], \[[EPA-Polyoxin](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-230000_01-Aug-01.pdf)\], \[[EPA-Potassium](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_G-135_01-Oct-04.pdf)\], \[[EPA-Potassium-salts](https://www3.epa.gov/pesticides/chem_search/reg_actions/reregistration/fs_G-76_1-Sep-92.pdf)\], \[[EPA-Potassium-silicate](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-072606_01-Sep-07.pdf)\], \[[EPA-Spiromedifen](https://www.federalregister.gov/documents/2013/01/16/2013-00728/spiromesifen-pesticide-tolerances#:~:text=Spiromesifen%20was%20classified%20as%20having,as%20a%20skin%20contact%20sensitizer.)\], \[[EPA-STREPTOMYCES-LYDICUS](https://www.google.com/search?q=who+toxicity+STREPTOMYCES+LYDICUS&sca_esv=573962864&bih=783&biw=512&hl=en&sxsrf=AM9HkKkeLm7h-VVDVlTDIMznNRBgYvY4Pw%3A1697508183688&ei=V-stZfvPKdWp1QGK0bqIAg&ved=0ahUKEwi716ri_vuBAxXVVDUKHYqoDiEQ4dUDCBA&uact=5&oq=who+toxicity+STREPTOMYCES+LYDICUS&gs_lp=Egxnd3Mtd2l6LXNlcnAiIXdobyB0b3hpY2l0eSBTVFJFUFRPTVlDRVMgTFlESUNVUzIFECEYoAEyBRAhGKsCMgUQIRirAkiABFAAWABwAHgAkAEAmAGUAaABlAGqAQMwLjG4AQPIAQD4AQL4AQHiAwQYACBBiAYB&sclient=gws-wiz-serp#:~:text=Biopesticides%20Fact%20Sheet,006327_25%2DNov%2D09)\], \[[EPA-SULFENTRAZONE](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-129081_27-Feb-97.pdf)\], \[[EPA-SULFUR](https://www3.epa.gov/pesticides/chem_search/reg_actions/reregistration/fs_PC-077501_1-May-91.pdf)\], and in other sources [@kilani-morakchi2021], \[[PubChem-Capric](https://pubchem.ncbi.nlm.nih.gov/compound/Capric-Acid)\], \[[Carfentrazone-ethyl](http://www.t3db.ca/toxins/T3D3805)\], \[[Pub-Chem-Copper.](https://pubchem.ncbi.nlm.nih.gov/compound/Cupric-Chloride#section=Toxicity-Data)\], \[[Copper-Octanoate](https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/cps-spc/alt_formats/pdf/pubs/pest/_decisions/rd2015-19/rd2015-19-eng.pdf)\], \[[ACS-Copper-Oxide](https://pubs.acs.org/doi/10.1021/tx800064j)\], \[[Cyprodinil](https://www.sciencedirect.com/topics/pharmacology-toxicology-and-pharmaceutical-science/cyprodinil#:~:text=Toxicity%20of%20fungicides&text=Anilinopyrimidine%20class%20of%20fungicides%20includes,normal%20use%20(Table%2052.1).)\], \[[DECYLDIMETHYLOCTYL](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5266374/#:~:text=DDAC%20is%20known%20to%20especially,dermatitis%20(11%2C12).)\], \[[Didecyl.](https://www.federalregister.gov/documents/2012/08/08/2012-19399/residues-of-didecyl-dimethyl-ammonium-chloride-exemption-from-the-requirement-of-a-tolerance#:~:text=The%20Aliphatic%20Alkyl%20Quaternaries%20are,and%20inhalation%20routes%20of%20exposure.)\], \[[Dodine](http://extoxnet.orst.edu/pips/dodine.htm#:~:text=Acute%20toxicity%3A%20Because%20it%20may,inhalation%20or%20ingestion%20%5B40%5D.)\], \[[Sodium-Ferric-Ethyl.](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-139114_01-Dec-08.pdf)\], \[[Garlic-Oil](https://ask.usda.gov/s/article/Can-you-get-botulism-from-garlic-in-oil)\], \[[Glyphosate](https://extension.psu.edu/glyphosate-roundup-understanding-risks-to-human-health#:~:text=Glyphosate%20toxicity.&text=Glyphosate%20has%20lower%20acute%20toxicity,90%25%20of%20all%20herbicides1.)\], \[[Hydrogen-Peroxide](https://wwwn.cdc.gov/TSP/MMG/MMGDetails.aspx?mmgid=304&toxid=55#:~:text=If%20ingested%2C%20solutions%20of%20hydrogen,has%20been%20associated%20with%20fatalities.)\], \[[Isofetamind](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6989172/)\], \[[Methoxyfenozide](https://sitem.herts.ac.uk/aeru/ppdb/en/Reports/461.htm#:~:text=Based%20on%20its%20chemical%20properties,human%20health%20have%20been%20identified.)\], \[[Mineral](https://www.mountsinai.org/health-library/poison/mineral-oil-overdose)[-oil](https://www.nj.gov/health/eoh/rtkweb/documents/fs/1437.pdf)\], \[[Mono-Potassium-Salt](https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/cps-spc/alt_formats/pdf/pubs/pest/_decisions/rd2015-20/rd2015-20-eng.pdf)\], \[[Mustard-oil](https://docs.house.gov/meetings/IF/IF17/20131113/101469/HHRG-113-IF17-Wstate-BenefieldD-20131113-SD037.pdf)\], \[[Peroxyacetic-acid](https://www.nj.gov/health/eoh/rtkweb/documents/fs/1482.pdf)\], \[[Quinoline](https://www.epa.gov/sites/default/files/2016-09/documents/quinoline.pdf)\], \[[CDC-PYRACLOSTROBIN](https://www.cdc.gov/mmwr/preview/mmwrhtml/mm5651a3.htm)\], \[[SOYBEAN-OIL](https://ecommons.cornell.edu/server/api/core/bitstreams/49df113e-134c-48f4-b908-81e4de417825/content)\].

Furthermore, through this search, I discovered through Chat GPT \[[Chat GPT](https://chat.openai.com/)\], that many of the "chemicals" were actually bacterium. I found the toxicity of the bacterium via web search from various sources \[[BACILLUS AMYLOLIQUEFAC F727.](https://publications.gc.ca/site/archivee-archived.html?url=https://publications.gc.ca/collections/collection_2022/sc-hc/h113-9/H113-9-2022-13-eng.pdf)\], \[[BACILLUS AMYLOLIQUEFACIENS MBI 600](https://apvma.gov.au/sites/default/files/publication/42531-public_release_summary_on_the_evaluation_of_the_new_active_bacillus_amyloliquefaciens_mbi_600_in_the_product_serifel_biofungicide_1.pdf)\], \[[BACILLUS AMYLOLIQUEFACIENS STRAIN D747](https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/cps-spc/alt_formats/pdf/pubs/pest/_decisions/rd2015-22/rd2015-22-eng.pdf)\], \[[BACILLUS PUMILUS](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6402940/#:~:text=pumilus%20has%20rarely%20been%20reported%20as%20a%20human%20pathogen.,%2C%20wound%2C%20and%20cutaneous%20infections.)\], \[[BACILLUS SUBTILIS](https://www.epa.gov/sites/default/files/2015-09/documents/fra009.pdf)\], \[[ALKYL. DIM. BENZ. AM](https://www.ewg.org/guides/substances/22336-AlkylDimethylbenzylammoniumchloridesC1216/#:~:text=EPA's%20review%20of%20industry%20submitted,high%20risk%20for%20human%20health.&text=A%20peer%2Dreviewed%20publication%20reports,cause%20reproductive%20toxicity%20in%20animals.)\], \[[AUREOBASIDIUM PULLULANS DSM 14940](https://www.federalregister.gov/documents/2012/02/15/2012-3585/aureobasidium-pullulans-strains-dsm-14940-and-dsm-14941-exemption-from-the-requirement-of-a#:~:text=The%20submitted%20acute%20oral%20toxicity,temperature%20of%2037%20%C2%B0C.)\], \[[BACILLUS SUBT. GB03](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-129068_01-Nov-99.pdf)\], \[[BEAUVERIA BASSIANA](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-128815_01-Sep-02.pdf)\], \[[BLAD](https://www.canada.ca/content/dam/hc-sc/migration/hc-sc/cps-spc/alt_formats/pdf/pubs/pest/_decisions/rd2015-18/rd2015-18-eng.pdf)\], \[[BT KURSTAK ABTS-1857](https://www3.epa.gov/pesticides/chem_search/cleared_reviews/csr_PC-006403_24-Apr-91_001.pdf)\], \[[BT](http://npic.orst.edu/ingred/bt.html#:~:text=Bacillus%20thuringiensis%20(Bt)%20is%20a,toxic%20to%20non%2Dtarget%20wildlife.)\], \[[BURKHOLDERIA A396 CELLS & MEDIA](https://downloads.regulations.gov/EPA-HQ-OPP-2011-0010-0004/content.pdf)\], \[[CAPSICUM OLEORESIN EXTRACT](https://www.osti.gov/servlets/purl/120857)\], \[[CHROMOBAC SUBTSUGAE PRAA4-1 CELLS AND SPENT MEDIA](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-016329_20-Aug-12.pdf)\], \[[GLIOCLADIUM VIRENS](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-129000_01-Apr-00.pdf)\], \[[HARPIN A B PROTEIN](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-006506_30-Jan-02.pdf)\], \[[HELICOVERPA ZEA NPV](https://www3.epa.gov/pesticides/chem_search/reg_actions/reregistration/fs_G-110_1-Jan-91.pdf)\], \[[NEEM OIL](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-025006_07-Apr-10.pdf)\], \[[PAECILOMYCES FUMOSOR](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-115002_01-Nov-99.pdf)\], \[[PETROLEUM DISTILLATE](https://nj.gov/health/eoh/rtkweb/documents/fs/2648.pdf)\], \[[PSEUDOMONAS CHLORORAPHIS STRAIN AFS009](https://www.federalregister.gov/documents/2017/07/28/2017-15741/pseudomonas-chlororaphis-strain-afs009-exemption-from-the-requirement-of-a-tolerance#:~:text=Based%20upon%20its%20evaluation%2C%20EPA,pathogenic%2C%20and%20is%20not%20infective.)\], \[[REYNOUTRIA SACHALINE](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/decision_PC-055809_1-Nov-00.pdf)\], \[[TRICHODERMA HARZ.](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-119200_01-May-00.pdf)\], \[[TRICHODERMA VIRENS STRAIN G-41](https://www3.epa.gov/pesticides/chem_search/reg_actions/registration/fs_PC-176604_06-Feb-12.pdf)\].

There were three `Unknown` values for `COPPER ETHANOLAMINE`, `KANTOR`, and `HALOSULFURON-METHYL`, which did not have any clear information on toxicity.

```{r}
#| echo: false 
strwb_survey_chem <- strwb_survey_chem |>
  mutate(toxicity = case_when(
    chemical %in% c("GARLIC OIL") ~ "Extremely hazardous",
    chemical %in% c("ABAMECTIN", "DODINE", "MINERAL OIL", "MUSTARD OIL", "ALKYL. DIM. BENZ. AM") ~ "Highly hazardous",
    chemical %in% c("ACEQUINOCYL", "BIFENTHRIN", "CARBARYL", "CHLORPYRIFOS", "CLOMAZONE", "COPPER HYDROXIDE", "CYPERMETHRIN", "DIAZINON", "DIFENOCONAZOLE", "DIMETHENAMID", "DIMETHYL DISULFIDE (DMDS)", "DODINE", "EMAMECTIN BENZOATE", "ENDOSULFAN", "FENAZAQUIN", "FENPROPATHRIN", "FENPYROXIMATE", "FLONICAMID", "FLUPYRADIFURONE", "FLUTRIAFOL", "GLUFOSINATE-AMMONIUM", "IMIDACLOPRID", "LAMBDA-CYHALOTHRIN", "METALDEHYDE", "METAM-SODIUM", "MYCLOBUTANIL", "NALED", "PARAQUAT", "PENDIMETHALIN", "PROPICONAZOLE", "PYRETHRINS", "PYRIDABEN", "SULFOXAFLOR", "TETRACONAZOLE", "THIAMETHOXAM", "THIRAM", "TRIFLUMIZOLE", "ZETA-CYPERMETHRIN", "ACETAMIPRID", "DECYLDIMETHYLOCTYL", "DIDECYL DIM. AMMON.", "DIDECYL DIM. AMMON.", "CAPSICUM OLEORESIN EXTRACT") ~ "Moderately hazardous",
    chemical %in% c("BIFENAZATE", "BOSCALID", "CAPTON", "CHLORANTRANILIPROLE", "CHLOROTHALONIL", "CYANTRANILIPROLE", "CYAZOFAMID", "FENHEXAMID", "FLUDIOXONIL", "FLUROXYPYR 1-MHE", "FLUTOLANIL", "FOSETYL-AL", "HEXYTHIAZOX", "MANCOZEB", "NAPROPAMIDE", "NOVALURON", "OXYFLUORFEN", "PIPERONYL BUTOXIDE", "PYDIFLUMETOFEN", "PYRIPROXYFEN", "SIMAZINE", "SPINETORAM", "TERBACIL", "THIOPHANATE-METHYL", "TRIFLOXYSTROBIN", "AZOXYSTROBIN", "CAPTAN", "CYFLUFENAMID", "CYPRODINIL", "GLYPHOSATE POT. SALT", "HYDROGEN PEROXIDE", "ISOFETAMID", "POTASSIUM SALTS", "SULFUR", "BACILLUS PUMILUS", "HELICOVERPA ZEA NPV", "NEEM OIL", "PSEUDOMONAS CHLORORAPHIS STRAIN AFS009", "TRICHODERMA HARZ.") ~ "Unlikely to present acute hazard",
    chemical %in% c("BUPROFEZIN", "CLOPYRALID MONO SALT", "CYFLUMETOFEN", "ETHEPHON", "ETOXAZOLE", "FENBUTATIN-OXIDE", "FLUBENDIAMIDE", "FLUMIOXAZIN", "FLUOPYRAM", "FLUXAPYROXAD", "GLYPHOSATE ISO. SALT", "GLYPHOSATE ISO. SALT", "IPRODIONE", "MALATHION", "PENTHIOPYRAD", "PYRIMETHANIL", "SPINOSAD", "SPIROTETRAMAT", "BORAX DECAHYDRATE", "CYTOKININS", "MONO-POTASSIUM SALT", "SPIROMESIFEN", "SULFENTRAZONE") ~ "Slightly hazardous",
    chemical %in% c("CHLOROPICRIN", "PYRACLOSTROBIN", "PETROLEUM DISTILLATE") ~ "Fatal if inhaled",
    chemical %in% c("DICHLOROPROPENE", "METHYL BROMIDE", "PEROXYACETIC ACID", "QUINOLINE") ~ "Toxic if inhaled",
    chemical %in% c("ACIBENZOLAR-S-METHYL", "AMMONIUM PELARGONATE", "AUREOBASIDIUM PULLULANS DSM 14941", "AZADIRACHTIN", "CANOLA OIL", "CAPRIC ACID", "CAPRYLIC ACID", "CAPSAICIN", "CARFENTRAZONE-ETHYL", "CLETHODIM", "COPPER CHLORIDE HYD.", "COPPER OCTANOATE", "COPPER OXIDE", "DIMETHYLDIOCTYL", "FERRIC SODIUM EDTA", "IRON PHOSPHATE", "MEFENOXAM", "METAM-POTASSIUM", "METHOXYFENOZIDE", "POLYOXIN D ZINC SALT", "POTASSIUM BICARBON.", "POTASSIUM SILICATE", "SOYBEAN OIL", "STREPTOMYCES LYDICUS", "BACILLUS AMYLOLIQUEFAC F727", "BACILLUS AMYLOLIQUEFACIENS MBI 600", "BACILLUS AMYLOLIQUEFACIENS STRAIN D747", "BACILLUS SUBTILIS", "AUREOBASIDIUM PULLULANS DSM 14940", "BACILLUS SUBT. GB03", "BEAUVERIA BASSIANA", "BLAD", "BT KURSTAK ABTS-1857", "BT KURSTAKI EG7841", "BT KURSTAKI SA-11", "BT KURSTAKI SA-12", "BT SUB AIZAWAI GC-91", "BT SUBSP KURSTAKI EVB-113-19", "BURKHOLDERIA A396 CELLS & MEDIA", "CHROMOBAC SUBTSUGAE PRAA4-1 CELLS AND SPENT MEDIA", "GLIOCLADIUM VIRENS", "HARPIN A B PROTEIN", "PAECILOMYCES FUMOSOR", "REYNOUTRIA SACHALINE", "TRICHODERMA VIRENS STRAIN G-41") ~ "No significant acute toxicity",
    TRUE ~ "Unknown"  
  ))
```

##### ***Addition to Strwb_Survey_Chem: CAS Registry Number***

Now, the second added column represents each pesticide's Chemical Abstract Service (CAS) Registry Number (`CAS#`). A CAS Registry Number allows each chemical compound, including molecular formulas, chemical structures, generic, systematic, common, and trade names, to have a clear identification number \[[CAS](https://www.cas.org/cas-data/cas-registry)\].

To find the `CAS#`s of each pesticide, I used \[WHO, 2019\], \[CHAT GPT\], and, mainly, the United States Environmental Protection Agency's Pesticide Chemical Search \[[EPA-search](https://ordspub.epa.gov/ords/pesticides/f?p=chemicalsearch:1)\]. After discovering that some of the rows in `chemical` are actually bacterium, all values that do not have `CAS#`s are indicated as `Bacteria`. All the other chemicals were matched with their appropriate `CAS#`.

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  mutate("CAS#" = case_when(
    chemical %in% c("ABAMECTIN") ~ "71751-41-2",
    chemical %in% c("ACEQUINOCYL") ~ "57960-19-7",
    chemical %in% c("ACETAMIPRID") ~ "135410-20-7",
    chemical %in% c("ACIBENZOLAR-S-METHYL") ~ "135158-54-2",
    chemical %in% c("AUREOBASIDIUM PULLULANS DSM 14941") ~ "67891-88-7",
    chemical %in% c("AZADIRACHTIN") ~ "108168-76-9",
    chemical %in% c("AZOXYSTROBIN") ~ "131860-33-8",
    chemical %in% c("BIFENAZATE") ~ "149877-41-8",
    chemical %in% c("BIFENTHRIN") ~ "82657-04-3",
    chemical %in% c("BORAX DECAHYDRATE") ~ "1303-96-4",
    chemical %in% c("BOSCALID") ~ "188425-85-6",
    chemical %in% c("BUPROFEZIN") ~ "69327-76-0",
    chemical %in% c("CANOLA OIL") ~ "120962-03-0",
    chemical %in% c("CAPRIC ACID") ~ "334-48-5",
    chemical %in% c("CAPRYLIC ACID") ~ "124-07-2",
    chemical %in% c("CAPSAICIN") ~ "404-86-4",
    chemical %in% c("CAPTAN") ~ "133-06-2",
    chemical %in% c("CARBARYL") ~ "63-25-2",
    chemical %in% c("CARFENTRAZONE-ETHYL") ~ "128639-02-1",
    chemical %in% c("CHLORANTRANILIPROLE") ~ "500008-45-7",
    chemical %in% c("CHLOROPICRIN") ~ "76-06-2",
    chemical %in% c("CHLOROTHALONIL") ~ "1897-45-6",
    chemical %in% c("CHLORPYRIFOS") ~ "2921-88-2",
    chemical %in% c("CLETHODIM") ~ "99129-21-2",
    chemical %in% c("CLOMAZONE") ~ "81777-89-1",
    chemical %in% c("CLOPYRALID MONO SALT") ~ "57754-85-5",
    chemical %in% c("COPPER ETHANOLAMINE") ~ "14215-52-2",
    chemical %in% c("COPPER HYDROXIDE") ~ "20427-59-2",
    chemical %in% c("COPPER OCTANOATE") ~ "20543-04-8",
    chemical %in% c("COPPER OXIDE") ~ "12158-97-3",
    chemical %in% c("CYAZOFAMID") ~ "120116-88-3",
    chemical %in% c("CYFLUFENAMID") ~ "180409-60-3",
    chemical %in% c("CYFLUMETOFEN") ~ "400882-07-7",
    chemical %in% c("CYPERMETHRIN") ~ "52315-07-8",
    chemical %in% c("CYPRODINIL") ~ "121552-61-2",
    chemical %in% c("CYTOKININS") ~ "525-79-1",
    chemical %in% c("DECYLDIMETHYLOCTYL") ~ "32426-11-2",
    chemical %in% c("DIAZINON") ~ "333-41-5",
    chemical %in% c("DICHLOROPROPENE") ~ "78-88-6",
    chemical %in% c("DIDECYL DIM. AMMON.") ~ "148788-55-0",
    chemical %in% c("DIFENOCONAZOLE") ~ "	119446-68-3",
    chemical %in% c("DIMETHENAMID") ~ "87674-68-8",
    chemical %in% c("DIMETHYL DISULFIDE (DMDS)") ~ "624-92-0",
    chemical %in% c("DIMETHYLDIOCTYL") ~ "5538-94-3",
    chemical %in% c("DODINE") ~ "2439-10-3",
    chemical %in% c("EMAMECTIN BENZOATE") ~ "155569-91-8",
    chemical %in% c("ENDOSULFAN") ~ "	115-29-7",
    chemical %in% c("ETHEPHON") ~ "16672-87-0",
    chemical %in% c("ETOXAZOLE") ~ "153233-91-1",
    chemical %in% c("FENAZAQUIN") ~ "120928-09-8",
    chemical %in% c("FENBUTATIN-OXIDE") ~ "13356-08-6",
    chemical %in% c("FENHEXAMID") ~ "	126833-17-8",
    chemical %in% c("FENPROPATHRIN") ~ "39515-41-8",
    chemical %in% c("FENPYROXIMATE") ~ "134098-61-6",
    chemical %in% c("FERRIC SODIUM EDTA") ~ "15708-41-5",
    chemical %in% c("FLONICAMID") ~ "158062-67-0",
    chemical %in% c("FLUBENDIAMIDE") ~ "272451-65-7",
    chemical %in% c("FLUDIOXONIL") ~ "131341-86-1",
    chemical %in% c("FLUMIOXAZIN") ~ "103361-09-7",
    chemical %in% c("FLUOPYRAM") ~ "658066-35-4",
    chemical %in% c("FLUROXYPYR 1-MHE") ~ "69377-81-7",
    chemical %in% c("FLUTOLANIL") ~ "66332-96-5",
    chemical %in% c("FLUTRIAFOL") ~ "76674-21-0",
    chemical %in% c("FLUXAPYROXAD") ~ "907204-31-3",
    chemical %in% c("FOSETYL-AL") ~ "39148-24-8",
    chemical %in% c("GARLIC OIL") ~ "8000-78-0",
    chemical %in% c("GLUFOSINATE-AMMONIUM") ~ "77182-82-2",
    chemical %in% c("GLYPHOSATE ISO. SALT") ~ "38641-94-0",
    chemical %in% c("GLYPHOSATE POT. SALT") ~ "70901-12-1",
    chemical %in% c("HALOSULFURON-METHYL") ~ "100784-20-1",
    chemical %in% c("HEXYTHIAZOX") ~ "78587-05-0",
    chemical %in% c("HYDROGEN PEROXIDE") ~ "7722-84-1",
    chemical %in% c("IMIDACLOPRID") ~ "138261-41-3",
    chemical %in% c("INDOLEBUTYRIC ACID") ~ "133-32-4",
    chemical %in% c("IPRODIONE") ~ "36734-19-7",
    chemical %in% c("IRON PHOSPHATE") ~ "10045-86-0",
    chemical %in% c("KANTOR") ~ "145701-23-1",
    chemical %in% c("LAMBDA-CYHALOTHRIN") ~ "91465-08-6",
    chemical %in% c("MALATHION") ~ "121-75-5",
    chemical %in% c("MANCOZEB") ~ "8018-01-7",
    chemical %in% c("MEFENOXAM") ~ "70630-17-0",
    chemical %in% c("METALDEHYDE") ~ "108-62-3",
    chemical %in% c("METAM-POTASSIUM") ~ "137-41-7",
    chemical %in% c("METAM-SODIUM") ~ "137-42-8",
    chemical %in% c("METHOXYFENOZIDE") ~ "161050-58-4",
    chemical %in% c("METHYL BROMIDE") ~ "74-83-9",
    chemical %in% c("MINERAL OIL") ~ "8012-95-1",
    chemical %in% c("MONO-POTASSIUM SALT") ~ "7447-40-7",
    chemical %in% c("MUSTARD OIL") ~ "57-06-7",
    chemical %in% c("MYCLOBUTANIL") ~ "88671-89-0",
    chemical %in% c("NALED") ~ "300-76-5",
    chemical %in% c("POTASSIUM SALTS") ~ "61790-44-1",
    chemical %in% c("POTASSIUM SILICATE") ~ "1312-76-1",
    chemical %in% c("PROPICONAZOLE") ~ "60207-90-1",
    chemical %in% c("PYRACLOSTROBIN") ~ "175013-18-0",
    chemical %in% c("PYRETHRINS") ~ "8003-34-7",
    chemical %in% c("PYRIDABEN") ~ "96489-71-3",
    chemical %in% c("PYRIMETHANIL") ~ "53112-28-0",
    chemical %in% c("PYRIPROXYFEN") ~ "95737-68-1",
    chemical %in% c("QUINOLINE") ~ "91-22-5",
    chemical %in% c("SIMAZINE") ~ "122-34-9",
    chemical %in% c("SOYBEAN OIL") ~ "8001-22-7",
    chemical %in% c("SPINETORAM") ~ "187166-40-1",
    chemical %in% c("SPINOSAD") ~ "283594-90-1",
    chemical %in% c("SPIROTETRAMAT") ~ "135410-20-7",
    chemical %in% c("SPIROMESIFEN") ~ "203313-25-1",
    chemical %in% c("SULFENTRAZONE") ~ "122836-35-5",
    chemical %in% c("SULFOXAFLOR") ~ "946578-00-3",
    chemical %in% c("SULFUR") ~ "7704-34-9",
    chemical %in% c("TERBACIL") ~ "5902-51-2",
    chemical %in% c("TETRACONAZOLE") ~ "112281-77-3",
    chemical %in% c("THIAMETHOXAM") ~ "153719-23-4",
    chemical %in% c("THIOPHANATE-METHYL") ~ "23564-05-8",
    chemical %in% c("THIRAM") ~ "137-26-8",
    chemical %in% c("TRIFLOXYSTROBIN") ~ "141517-21-7",
    chemical %in% c("TRIFLUMIZOLE") ~ "68694-11-1",
    chemical %in% c("ZETA-CYPERMETHRIN") ~ "176260-57-3",
    chemical %in% c("AMMONIUM PELARGONATE") ~ "144-08-3",
    chemical %in% c("ISOFETAMID") ~ "163520-33-0", 
    chemical %in% c("FLUPYRADIFURONE") ~ "951659-40-8",
    chemical %in% c("NAPROPAMIDE") ~ "15299-99-7",
    chemical %in% c("NOVALURON") ~ "116714-46-6",
    chemical %in% c("OXYFLUORFEN") ~ "42874-03-3", 
    chemical %in% c("PARAQUAT") ~ "1910-42-5", 
    chemical %in% c("PENDIMETHALIN") ~ "40487-42-1",
    chemical %in% c("PENTHIOPYRAD") ~ "183675-82-3",
    chemical %in% c("PEROXYACETIC ACID") ~ "79-21-0",
    chemical %in% c("PIPERONYL BUTOXIDE") ~ "51-03-6",
    chemical %in% c("POLYOXIN D ZINC SALT") ~ "63548-53-8",
    chemical %in% c("POTASSIUM BICARBON.") ~ "298-14-6",
    chemical %in% c("CYANTRANILIPROLE") ~ "392850-27-3",
    chemical %in% c("PYDIFLUMETOFEN") ~ "1269816-73-9",
    chemical %in% c("COPPER CHLORIDE HYD.") ~ "10125-13-0",
    TRUE ~ "Bacteria"  
  ))
```

Quickly, I reorganized `strwb_survey_chem` to have the columns in a different order.

```{r}
#| echo: false
strwb_survey_chem <- strwb_survey_chem |>
  select(1:5, 7, 6)
```

I also changed the column name from `chemical` to `strwb_treatment`, as bacterium are not chemicals.

```{r}
#| echo: false

strwb_survey_chem <- strwb_survey_chem |>
  rename("strwb_treatment" = "chemical")
```

Finally, to finish the data cleaning and organization of `strwb_survey_chem`, I changed the name of the data frame to `strwb_survey_treat` (treat = treatment) to avoid confusion, since it is known that all strawberry pesticide treatments are not only chemicals but also bacterium.

```{r}
#| echo: false

strwb_survey_treat <- strwb_survey_chem
```

# Exploratory Data Analysis

Now, to begin the Exploratory Data Analysis of the [USDA-NASS](https://quickstats.nass.usda.gov/results/45FBC825-B104-38E2-9802-839F5F3C7036) data set. First, I have reviewed each data frame associated with the data set. Next, I searched for and examined any missing values in the data frames. After that, I categorized the values in the data set to prepare for visualization. Finally, I analyzed the relationships in the data frames through visualization and located any outliers \[[EDA-Advice](https://www.indeed.com/career-advice/career-development/how-to-conduct-exploratory-data-analysis)\].

## Review of Data Frames

### strwb_census

#### Columns & Values

The column names in `strwb_census` are as follows: `Program`, `Year`, `State`, `Fruit`, `crop_type`, `Totals`, `Fresh Market`, `Process Market`, `Metric`, `Value`, and `CV (%)`.

##### Program

`Program` has a single string of `CENSUS` in every column. `CENSUS` represents that the data derived from a census of states based on their strawberry production.

##### Year

`Year` represents the years in which the data was collected. The years are as follows: `r paste(strwb_census |> distinct(Year))`.

##### State

`State` holds all the US states that held any census data on their strawberry production (`r paste(strwb_census |> distinct(State))`).

##### Fruit

`Fruit` has a single string of `STRAWBERRY`, which shows that all the data is based on this fruit.

##### crop_type

`crop_type` also has a single string, `ORGANIC`, which shows that the entirety of the production data is based on organic strawberries.

##### Totals

`Totals` holds three values: `r paste(strwb_census |> distinct(Totals))`. The `SALES` string reprents the sales of strawberries, `OPERATIONS WITH SALES` represents how many operating strawberry production with intent to sell, and `PRODUCTION` represents the amount of strawberries produced.

##### Fresh Market

`Fresh Market` holds two values: `OPERATIONS WITH SALES` and `SALES`. The definition of both of these values are the same as the `Totals` column.

##### Process Market

`Process Market` has the same strings as `Fresh Market`.

##### Metric

`Metric` has the following strings: `r paste(strwb_census |> distinct(Metric))`.

The empty string holds no values because that row did not need a metric to help describe the data. `$` represents that the metric for the following `Value` column is in US Dollars. `CWT` is weight in 100's

\[[CWT](https://mainlinemetals.com/resource-term/hundredweight-cwt/#:~:text=A%20hundredweight%20(CWT)%20measures%20the,in%20large%20volumes%20or%20weight.)\].

##### Value

The `Value` column holds numeric values that correspond with the strings in `Totals`, `Fresh Market`, and `Process Market`, as well as the `Metric` column.

##### CV (%)

Finally, the `CV (%)` column holds the co-efficients of variance of the numeric values in the `Value` column.

#### Missing Values

All rows with missing values in the `Value` column were omitted. The missing values represented values that were omitted by the state upon census data collection. These values have no purpose in the data analysis.

#### Categorizing Values

All columns, but `Value` and `CV (%)` hold nominal variables. Both the `Value` column and `CV (%)` hold interval variables.

### Data Visualization

#### Questions

After analyzing the columns and values of `strwb_census` , I developed the following questions:

1.  What state held the most organic operational strawberry sellers?

2.  What states made the most money producing strawberries?

3.  What states produced the most strawberries?

These questions will be individually answered below via data visualization.

##### What state held the most organic operational strawberry sellers?

Figure 3 below shows all the US states but California who reported Census data from 2019 to 2021 for their organic strawberry operational sellers. California was moved to Figure 5 as it was a significantly high outlier from the other states in operational sellers. Connecticut was the only state that had data for both 2019 and 2021, Alabama only reported data for 2019, and the remaining states only reported for 2021. The state with the most organic sellers was by far California (n = 142). Next was Oregon (n = 26), but was also significantly lower than California. The least number of sellers were located in Alabama (n = 2) with Georgia (n = 4) and Iowa (n = 4) following the next least.

```{r}
#| echo: false

filtered_data <- strwb_census |>
  filter(Totals == "OPERATIONS WITH SALES"& State != "CALIFORNIA")

ggplot(data = filtered_data,
       mapping = aes(x = Year, y = Value, fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~State, nrow = 3) +
  geom_text(aes(label = Value), vjust = -0.5, position = position_dodge(width = 0.9)) +
  labs(
    title = "Figure 3. States* and Organic Operational Strawberry Sales",
    x = "Year",
    y = "Operations with Sales",
    caption = "*California was excluded due to extremely higher sales"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2019, 2021)) 
```

```{r}
#| echo: false

filtered_data4 <- strwb_census |>
  filter(Totals == "OPERATIONS WITH SALES" & State == "CALIFORNIA")

ggplot(data = filtered_data4,
       mapping = aes(x = Year, y = Value, fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Figure 3. California* and Organic Operational Strawberry Sales",
    x = "Year",
    y = "Operations with Sales",
    caption = "*California was only included, as it was an outlier for the other data"
  ) +
  scale_x_continuous(breaks = c(2019, 2021)) +
  theme_bw() 
```

##### What states made the most money producing strawberries?

In Figure 4 below, there are varying amounts of money made on organic strawberry sales for each state who provided data. California's organic strawberry sales were moved to Figure 5 due to it being an extreme outlier with the highest sales high above every other state (n = 311,784,980). Massachusetts is the second highest in sales (n = 94,827). Georgia made the least in sales (n = 11,600), and Illnois was the second least (n = 16,000).

```{r}
#| echo: false

filtered_data2 <- strwb_census |>
  filter(Totals == "SALES" & State != "CALIFORNIA" & Metric == "$") 

ggplot(data = filtered_data2,
       mapping = aes(x = Year, y = (Value/1000), fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~State, ncol = 4) +
  geom_text(aes(label = Value), vjust = -0.5, position = position_dodge(width = 0.9)) +
  labs(
    title = "Figure 4. States* and Organic Strawberry Sales",
    subtitle = "in US Dollars",
    x = "Year",
    y = "Sales ($ in 1000s)",
    caption = "*California was excluded due to extremely higher sales"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2019, 2021)) 

```

```{r}
#| echo: false

filtered_data3 <- strwb_census |>
  filter(Totals == "SALES" & State == "CALIFORNIA" & Metric == "$") 

ggplot(data = filtered_data3,
       mapping = aes(x = Year, y = (Value/100000), fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Figure 5. California* and Organic Strawberry Sales",
    subtitle = "in US Dollars",
    x = "Year",
    y = "Sales ($ in 100000s)",
    caption = "*Only California was included, as it is an outlier from the other states"
  ) +
  scale_x_continuous(breaks = c(2019, 2021)) +
  theme_bw() 
```

##### What states produced the most strawberries?

On pattern with the other questions, all states but California were included in Figure 6 for the states who produced the most organic strawberry in hundredweight. Figure 7 holds the organic strawberry weight produced in tens of thousands. California has the highest hundredweight produced (n = 1,412,627). The next highest was Oklahoma (n = 1,858), which is still significantly lower than California. The lowest in organic strawberry production was Illnois (n = 53), and the next lowest was Kentucky (n = 62).

```{r}
#| echo: false

filtered_data5 <- strwb_census |>
  filter(Totals == "SALES" & State != "CALIFORNIA" & Metric == "CWT") 

ggplot(data = filtered_data5,
       mapping = aes(x = Year, y = Value, fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~State, ncol = 4) +
  geom_text(aes(label = Value), vjust = -0.5, position = position_dodge(width = 0.9)) +
  labs(
    title = "Figure 6. States* and Organic Strawberry Sales",
    subtitle = "in US Dollars",
    x = "Year",
    y = "Weight of Sales (100s)",
    caption = "*California was excluded due to being an extreme outlier"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2016, 2021)) 
```

```{r}
#| echo: false

filtered_data6 <- strwb_census |>
  filter(Totals == "SALES" & State == "CALIFORNIA" & Metric == "CWT") 

ggplot(data = filtered_data6,
       mapping = aes(x = Year, y = (Value/100), fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Figure 7. California* and Organic Strawberry Sales",
    subtitle = "in US Dollars",
    x = "Year",
    y = "Weight of Sales (10000s)",
    caption = "*California was only included, as it was an extreme outlier"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2019, 2021)) 
```

### strwb_survey_mkt

#### Columns & Values

There are five columns in `strwb_survey_mkt`: `Year`, `State`, `measurement`, `avg`, `type`, `fertilizer_type`, and `Value`. The columns represent the fertilizer type used for each year for each state and the amount of it that was used.

##### Year

`Year` holds two year values: `2018` and `2019`. This represents the year that the following values took place.

##### State

`State` has two US state values: `CALIFORNIA` and `FLORIDA`. Each of these represent the US state that returned data for the selected columns included in this data frame.

##### measurement

`measurement` has the following three values : `r paste(strwb_survey_mkt |> distinct(measurement))`. `MEASURED IN LB` represents that the following `Value` is in pounds (lbs). `MEASURED IN LB / ACRE / APPLICATION` is that the `Value` was measured in lbs divided by acreage of the farm and by the amount applied when used.

##### avg

`avg` holds `NA` and `avg` values. `avg` represents when an average was taken, and `NA` is present when an average was not needed for the type of measurement.

##### type

`type` holds the single string of `FERTILIZER`, which represents that all the rows hold data related to fertilizers.

##### fertilizer_type

`fertilizer_type` holds the following strings of fertilizer types used on the strawberry crops: `r paste(strwb_survey_mkt |> distinct(fertilizer_type))`.

##### Value

`Value` which holds numeric values that correspond with the `measurement` and `avg` columns to show the value related to the fertilizer usage.

#### Missing Values

All rows with data almost identical to `strwb_census` were removed. Additionally, all rows with `NA` values in the `Value` column were omitted, as they did not hold any meaningful data.

#### Categorizing Variables

All columns but `Value` and hold nominal variables. The `Value` column holds interval variables.

### Data Visualization

#### Questions

The following questions will be answered via data visualization below:

1.  What state used what fertilizer types? What fertilizers were used the most?

2.  What state used the most pounds of fertilizer?

3.  What state used the most pounds per an acre per application of fertilizer? What fertilizer was used the most?

##### What state used what fertilizer types?

As shown in Figure 8 below, California used all four fertilizers on their crops (nitrogen, phosphate, potash, sulfur), and Florida used all but sulfur. The fertilizer used the most was nitrogen for both California (n = 16.9) and Florida (n = 28.7). Next most used was potash for both California (n = 14.3) and Florida (n = 25.2). Florida used more fertilizer than California for all three fertilizers they both used.

```{r}
#| echo: false

filtered_data10 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN NUMBER") 

ggplot(data = filtered_data10,
       mapping = aes(x = Year, y = Value, fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~fertilizer_type, ncol = 2) +
  labs(
    title = "Figure 8. Fertilizer Usage on Strawberry Crops",
    subtitle = "in California and Florida",
    x = "Year",
    y = "Average Number of Fertilizer Usage",
    caption = "Sulfur was only used in California"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2018, 2019))
  
```

##### What state used the most pounds of fertilizer?

Figure 9 shows the pounds (lbs) of fertilizer by type for the state of California, and Figure 10 shows such for Florida. California (N = 31,289,000) used far more lbs of fertilizer than Florida (N = 1,146,000) between the years of 2018 and 2019. California used far more lbs of all four fertilizers in 2018 than in 2019. Florida had the opposite with more fertilizer used in 2019 than 2018.

```{r}
#| echo: false

filtered_data11 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN LB" & State == "CALIFORNIA") 

ggplot(data = filtered_data11,
       mapping = aes(x = Year, y = (Value/10000))) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~fertilizer_type, ncol = 2) +
  labs(
    title = "Figure 9. Pounds of Fertilizer Used on Strawberries in California",
    x = "Year",
    y = "lbs of Fertilizer Used (10000s)",
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2018, 2019)) 
  
```

```{r}
#| echo: false

filtered_data12 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN LB" & State == "FLORIDA") 

ggplot(data = filtered_data12,
       mapping = aes(x = Year, y = (Value/10000))) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~fertilizer_type, nrow = 1) +
  labs(
    title = "Figure 10. Pounds of Fertilizer Used on Strawberries in Florida",
    x = "Year",
    y = "lbs of Fertilizer Used (10000s)",
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2018, 2019)) 
```

##### What state used the most pounds per an acre per application of fertilizer?

```{r}
#| echo: false

filtered_data20 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN LB / ACRE / APPLICATION" & State == "CALIFORNIA")

filtered_data21 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN LB / ACRE / APPLICATION" & State == "FLORIDA") 
```

Figure 11 below shows that California (Mean = `r paste(round(mean(filtered_data20$Value)))`) used significantly more lbs of fertilizer per an acre and application than Florida (Mean = `r paste(round(mean(filtered_data21$Value)))`). The most used pesticide for California (n = 24) and Florida (n = 2) was potash.

```{r}
#| echo: false

filtered_data13 <- strwb_survey_mkt |>
  filter(measurement == "MEASURED IN LB / ACRE / APPLICATION") 

ggplot(data = filtered_data13,
       mapping = aes(x = Year, y = (Value), fill = State)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~fertilizer_type, nrow = 2) +
  geom_text(aes(label = Value), vjust = -0.5, position = position_dodge(width = 0.9)) +
  labs(
    title = "Figure 11. Pounds of Fertilizer Used Per Acre Per Application",
    subtitle = "in Florida and California",
    x = "Year",
    y = "lbs/acre/application",
    caption = "Sulfur was only used in California"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = c(2018, 2019)) +
  scale_y_continuous(breaks = c(5, 10, 15, 20, 25, 30)) 
```

### strwb_survey_treat

#### Columns & Values

The columns in `strwb_survey_treat` are as follows: `r paste(colnames(strwb_survey_treat))`. Each of the values in the columns are explained below.

`Year` represents the year in which the values in the row are from. The years are as follows: `r paste(strwb_survey_treat |> distinct(Year))`.

`State` has the following strings: `r paste(strwb_survey_treat |> distinct(State))`. Each as these show what US state the survey data was retrieved from.

`chem_type` holds strings representing categories of pesticides used: `r paste(strwb_survey_treat |> distinct(chem_type))`.

`strwb_treatment` represents the chemical or bacteria used on the strawberry crops: `r paste(strwb_survey_treat |> distinct(strwb_treatment))`.

`PC#` represents the treatment identification number, Pesticide Chemical Code. These are numeric values.

`CAS#` either had the Chemical Abstracts Service number or is indicated as `Bacteria`, as bacterium do not have CAS#s.



Finally, `toxicity` holds the following strings: `r paste(strwb_survey_treat |> distinct(toxicity))`. These are based on the World Organization Health Organization's Pesticide Toxicity Classification \[[WHO, 2019](https://www.who.int/publications/i/item/9789240005662)\] (see more information above).

# References
